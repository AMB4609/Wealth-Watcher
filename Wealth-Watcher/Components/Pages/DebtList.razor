@page "/debts"
@using Wealth_Watcher.Model
@inject Wealth_Watcher.Services.IDebtService DebtService
@inject Wealth_Watcher.Services.ITransactionService transactionService

<h1>Debts</h1>
<h2 style="color: blue;">Pending Debts</h2>
<table class="table">
    <thead>
        <tr>
            <th>Debt Code</th>
            <th>Source</th>
            <th>Due Date</th>
            <th>Total Price</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var debt in pendingDebts)
        {
            <tr>
                <td>@(debt.debtId)</td>
                <td>@debt.source</td>
                <td>@debt.dueDate</td>
                <td>@debt.price</td>
                <td><button class="button-clear" @onclick="() => ClearDebt(debt)">Clear</button></td>
            </tr>
        }
    </tbody>
</table>

<h2 style="color: green;">Cleared Debts</h2>
<table class="table">
    <thead>
        <tr>
            <th>Debt Code</th>
            <th>Source</th>
            <th>Due Date</th>
            <th>Total Price</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var debt in clearedDebts)
        {
            <tr>
                <td>@debt.debtId</td>
                <td>@debt.source</td>
                <td>@debt.dueDate</td>
                <td>@debt.price</td>
                <td>Cleared</td>
            </tr>
        }
    </tbody>
</table>

<style>
    .table {
        width: 100%;
        border-collapse: collapse;
    }
    th, td {
        border: 1px solid black;
        padding: 8px;
        text-align: left;
    }
    .button-clear {
        color: white;
        background-color: red;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
</style>

@code {
    private List<Debt> pendingDebts;
    private List<Debt> clearedDebts;

    protected override async Task OnInitializedAsync()
    {
        var debts = await DebtService.GetAllDebtsAsync();
        pendingDebts = debts.Where(d => !d.cleared).ToList();
        clearedDebts = debts.Where(d => d.cleared).ToList();
    }

    private async Task ClearDebt(Debt debt)
    {
        debt.cleared = true;
        await DebtService.UpdateDebt(debt);
        transactionService.AdjustInflowForClearedDebt(debt.price);
        transactionService.AdjustOutflowForClearedDebt(debt.price);
        pendingDebts.Remove(debt);
        clearedDebts.Add(debt);
    }
}
