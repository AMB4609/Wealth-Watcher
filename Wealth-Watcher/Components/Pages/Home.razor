@page "/dashboard"
@using Wealth_Watcher.Model
@using MudBlazor
@inject Wealth_Watcher.Services.IDebtService debtService
@inject Wealth_Watcher.Services.ITransactionService transactionService
@inject Wealth_Watcher.Services.IUserService userService

<style>
    .mud-table-cell, .mud-table-head-cell {
        padding: 12px; /* Custom padding for table cells */
        text-align: left; /* Align text to the left in table cells */
    }
</style>

<MudGrid>
    <!-- Date filter section -->
    <MudItem xs="12">
        <MudPaper Class="p-4">
            <MudGrid>
                <MudItem xs="6" md="3">
                    <MudDatePicker Label="Start Date" @bind-Date="startDate" />
                </MudItem>
                <MudItem xs="6" md="3">
                    <MudDatePicker Label="End Date" @bind-Date="endDate" />
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadData">Filter</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>

    <!-- Summary cards for financial data -->
    <MudGrid>
        <MudItem xs="6" sm="3">
            <MudPaper Class="pa-4" Style="background-color: #a7c957; color: black;">Total Inflows<br>@totalInflows</MudPaper>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudPaper Class="pa-4" Style="background-color: #bc4749; color: black;">Total Outflows<br>@totalOutflows</MudPaper>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudPaper Class="pa-4" Style="background-color: #bc4749; color: black;">CurrentBalance<br>@currentBalance</MudPaper>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="6" sm="3">
            <MudPaper Class="pa-4" Style="background-color: #bc4749; color: black;">Pending Debt<br>@pendingDebt</MudPaper>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudPaper Class="pa-4" Style="background-color: #a7c957; color: black;">Cleared Debt<br>@clearedDebt</MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Debt tables for pending and cleared debts -->
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudPaper Class="mt-4 p-4">
                <MudText Typo="Typo.h5" Class="my-2" Style="color: #bc4749;">Pending Debts</MudText>
                <MudTable T="Debt" Items="pendingDebts" Hover="true" Striped="true" Bordered="true" Dense="false">
                    <HeaderContent>
                        <MudTh>@Source</MudTh>
                        <MudTh>@DueDate</MudTh>
                        <MudTh>@TotalPrice</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="debt">
                        <MudTd>@debt.source</MudTd>
                        <MudTd>@debt.dueDate</MudTd>
                        <MudTd>@debt.price.ToString("C")</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Class="mt-4 p-4">
                <MudText Typo="Typo.h5" Class="my-2" Style="color: #a7c957;">Cleared Debts</MudText>
                <MudTable T="Debt" Items="clearedDebts" Hover="true" Striped="true" Bordered="true" Dense="false">
                    <HeaderContent>
                        <MudTh>@Source</MudTh>
                        <MudTh>@DueDate</MudTh>
                        <MudTh>@TotalPrice</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="debt">
                        <MudTd>@debt.source</MudTd>
                        <MudTd>@debt.dueDate</MudTd>
                        <MudTd>@debt.price.ToString("C")</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Transaction overview and chart display -->
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="mt-4 p-4">
                <MudGrid Style="align-items: center;">
                    <MudItem xs="12" md="8">
                        <MudText Typo="Typo.h5" Class="my-2" Style="color: black;">Transactions</MudText>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudSelect T="string" Value="Selection" Label="Type" FullWidth ValueChanged="OnSelectionChange">
                            <MudSelectItem Value=@("Highest") />
                            <MudSelectItem Value=@("Lowest") />
                        </MudSelect>
                    </MudItem>
                </MudGrid>
                <MudTable T="Transaction" Items="topTransactions" Hover="true" Striped="true" Bordered="true" Dense="false">
                    <HeaderContent>
                        <MudTh>TransactionDate</MudTh>
                        <MudTh>Amount</MudTh>
                        <MudTh>Type</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="transaction">
                        <MudTd>@transaction.transactionDate</MudTd>
                        <MudTd>@transaction.amount.ToString("C")</MudTd>
                        <MudTd>@transaction.type</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="mt-lg p-lg mh-500px">
                <MudText Typo="Typo.h5" Class="my-2">Financial Overview</MudText>
                <MudChart ChartType="ChartType.Pie" InputData="chartData" InputLabels="@labels">
                </MudChart>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudGrid>

@code {
    private DateTime? startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    private DateTime? endDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month));
    private String Selection = "Highest";
    private Boolean highOrLow = true;
    private decimal totalInflows;
    private decimal totalOutflows;
    private decimal currentBalance;
    private decimal pendingDebt;
    private decimal clearedDebt;
    private List<Transaction> transactions;
    private List<Debt> pendingDebts;
    private List<Debt> clearedDebts;
    private String PendingDebts = "Pending Debts";
    private String Source = "Source";
    private String DueDate = "Due Date";
    private String TotalPrice = "Total Price";
    private List<Transaction> topTransactions;
    private double[] chartData;
    private string[] labels;

    // Initialization and data loading method
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    // Method to update and sort transactions based on selection
    private async Task UpdateTopTransactions()
    {
        highOrLow = Selection == "Highest";
        topTransactions = await transactionService.GetTopTransactionsDashboardAsync(5, highOrLow, startDate, endDate);
        StateHasChanged();
    }

    // Event handler for selection change in transaction sorting
    private async Task OnSelectionChange(string Value)
    {
        Selection = Value;
        await UpdateTopTransactions();
    }

    // General method to load and refresh all data
    private async Task LoadData()
    {
        var debts = await debtService.GetAllDebtsDashboardAsync(startDate, endDate);
        pendingDebts = debts.Where(d => !d.cleared).ToList();
        clearedDebts = debts.Where(d => d.cleared).ToList();
        totalInflows = transactionService.GetTotalInflowsDashboard(startDate, endDate);
        totalOutflows = transactionService.GetTotalOutflowsDashboard(startDate, endDate);
        currentBalance = userService.GetCurrentBalanceDashboard();
        pendingDebt = debtService.GetTotalPendingDebtDashboard(startDate, endDate);
        clearedDebt = debtService.GetTotalClearedDebtDashboard(startDate, endDate);
        topTransactions = await transactionService.GetTopTransactionsDashboardAsync(5, highOrLow, startDate, endDate);
        await UpdateTopTransactions();
        chartData = new[] { (double)totalInflows, (double)totalOutflows, (double)pendingDebt };
        labels = new[] { "Total Inflows", "Total Outflows", "Pending Debt" };
        StateHasChanged();
    }
}
